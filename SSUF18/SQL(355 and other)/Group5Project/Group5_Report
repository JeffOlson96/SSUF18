	Group5 Report


	In order to get it into its highest possible normal form, we first had to analyze what aspects of the data could be uniquely identified, as from there we could calculate the functional dependencies. Through our analysis, we found two identifiable components. The first component was a trip, which is uniquely identifiable by a combination of the bike id and the start time (since the bike can’t be used for two different trips at the same) which identifies the end time and duration, the end and starting station ids, as well as the user info such as user type, gender, and birth year. The second was stations, which are uniquely identifiable by their station id which identifies the station’s name, as well as it’s longitude and latitude. If we make these both into their own separate tables, the schema becomes BCNF, as each attribute of either table can only be found via their respective table’s key, which means from a relational perspective, each functional dependency has a the superkey on the left side, meeting BCNF criteria. Since we maintained all the attributes we started with and the only dependencies we had were incorporated into the keys for either table, the schema should be both lossless and dependency preserving.
	The implementation strategy was based around solving small problems that set the foundation to solve the overall problem, which was to query a sql database over the web and display the data received. The php app has 2 main parts: the query parser, which parses the sql statement to retrieve information used to display the data returning from the database; and the actual sql connection, query, and data display. The query parser is there to allow a dynamic display of query information. Parsing the query and saving elements that are important to how the data is displayed (columns wanting to be queried or lack of) because the column name was necessary to be able to access the result_set (the return value of mysqli_query). Displaying query information has a bunch of variables and a lot of time went into making sure those cases are dealt with accordingly. The HTML consists of a textbox, three buttons for use, and some css for styling purposes.
	Some of the first challenges that our group faced was connecting to blue through MySQL. Once we were able to get over that hurdle and stop using a local server we were really able to start working on the project. We then came across challenges like deciding how to break up the tables so that they each had keys that worked properly. Deciding what normal form to format the data in was another controversial issue. Dealing with PHP was also a big issue, trying to get all of the important information and the fact that SQL queries come with multiple column names and a bunch of variables to take into account all made the process fairly difficult.
